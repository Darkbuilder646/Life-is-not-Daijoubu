//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""SpacePlayer"",
            ""id"": ""35cd7c04-e6ea-4346-ae25-c95c61932849"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""89fb7028-f815-4f57-9297-b17e759b3a6d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Hover"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f006fd3a-344c-4b23-a10a-024a074d585c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9b42ce5a-5637-481b-862d-2c8c11fadea6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b147dc90-071b-4b21-a39a-58e272db63bd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DismountShip"",
                    ""type"": ""Button"",
                    ""id"": ""3021eb52-8031-45ad-833b-1549e48597f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PickUp"",
                    ""type"": ""Button"",
                    ""id"": ""3e0c066d-d459-4973-bccb-525fd983334b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""0abe3c9b-9a49-40e4-a602-00a9713c8a21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""ZQSD"",
                    ""id"": ""01565dd7-793a-4a49-a08a-435c0e7a7954"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f55f39a7-0746-4927-8235-1dc65161d526"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""46ce318c-be6f-41ef-b8f5-3a7f79cf3db9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fd9ea546-2ba6-420f-8f18-99f30d353c8c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""55216b92-3ec2-4d20-a84a-756643c327a6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Up/Down"",
                    ""id"": ""169c3e2c-c29a-4673-b51b-9ad93a43bc82"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hover"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""09cf7388-ae66-425a-877a-4a4e77975716"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a0d97b6d-dc92-43e0-9a01-66d6d6a2a060"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6fe97247-1f35-441b-abcf-b11dabaaa2cf"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""A/E"",
                    ""id"": ""bca5a583-5291-4225-a419-91b37cd44d5d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8e5c64e4-5674-44e7-96ef-cad741963f55"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""5721f4d9-64f3-4315-b8be-bbd1e65f544d"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""12f7d150-7de9-45cb-851c-ddd2758d9b02"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DismountShip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8ad3182-1afc-4cd1-bb46-477ad3f4ed4e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a8aaa61-68a1-4abb-b295-27e58aabe079"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GroundPlayer"",
            ""id"": ""619bafe1-01ce-4aad-a133-32a11ddc6a00"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a34e27fc-7c9c-46a4-bc57-b08aca1ce95c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""c81dd29e-d421-4870-afc5-9e7b2cd5b1d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""effbcc6c-aae4-42fc-a3a7-d374bc32dfe1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DismountShip"",
                    ""type"": ""Button"",
                    ""id"": ""6730ee16-afa5-4358-939e-7878c0afa13e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PickUp"",
                    ""type"": ""Button"",
                    ""id"": ""3ccfbc16-036e-49ff-a69a-1eb6735015fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""62e03799-a92b-4daa-bb0b-540f2270767f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""ZQSD"",
                    ""id"": ""9d641191-658d-4884-8e8c-86eead513ee8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""aa9511c2-2c58-451e-8102-524ea5a761e4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5737fc15-a00c-44ba-9fde-e99115116f89"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4a4d3d76-45ce-49b7-ac86-a67ffb27147e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""84b566f8-1d9a-425a-8d88-0672aca4ec4f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b5733395-bb53-45c2-9dbd-cc5a66b2202f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""841a3a29-cba5-4452-9f2c-1f99d630aeae"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c1205d6-06f8-4c6d-a960-56fa9561da14"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fe1c80b-aacb-46f0-9b60-8c8569726ed1"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc51e4ac-ee91-4721-a70d-ddd4251e1036"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DismountShip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SpacePlayer
        m_SpacePlayer = asset.FindActionMap("SpacePlayer", throwIfNotFound: true);
        m_SpacePlayer_Movement = m_SpacePlayer.FindAction("Movement", throwIfNotFound: true);
        m_SpacePlayer_Hover = m_SpacePlayer.FindAction("Hover", throwIfNotFound: true);
        m_SpacePlayer_Roll = m_SpacePlayer.FindAction("Roll", throwIfNotFound: true);
        m_SpacePlayer_Look = m_SpacePlayer.FindAction("Look", throwIfNotFound: true);
        m_SpacePlayer_DismountShip = m_SpacePlayer.FindAction("DismountShip", throwIfNotFound: true);
        m_SpacePlayer_PickUp = m_SpacePlayer.FindAction("PickUp", throwIfNotFound: true);
        m_SpacePlayer_Pause = m_SpacePlayer.FindAction("Pause", throwIfNotFound: true);
        // GroundPlayer
        m_GroundPlayer = asset.FindActionMap("GroundPlayer", throwIfNotFound: true);
        m_GroundPlayer_Movement = m_GroundPlayer.FindAction("Movement", throwIfNotFound: true);
        m_GroundPlayer_Jump = m_GroundPlayer.FindAction("Jump", throwIfNotFound: true);
        m_GroundPlayer_Look = m_GroundPlayer.FindAction("Look", throwIfNotFound: true);
        m_GroundPlayer_DismountShip = m_GroundPlayer.FindAction("DismountShip", throwIfNotFound: true);
        m_GroundPlayer_PickUp = m_GroundPlayer.FindAction("PickUp", throwIfNotFound: true);
        m_GroundPlayer_Pause = m_GroundPlayer.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SpacePlayer
    private readonly InputActionMap m_SpacePlayer;
    private ISpacePlayerActions m_SpacePlayerActionsCallbackInterface;
    private readonly InputAction m_SpacePlayer_Movement;
    private readonly InputAction m_SpacePlayer_Hover;
    private readonly InputAction m_SpacePlayer_Roll;
    private readonly InputAction m_SpacePlayer_Look;
    private readonly InputAction m_SpacePlayer_DismountShip;
    private readonly InputAction m_SpacePlayer_PickUp;
    private readonly InputAction m_SpacePlayer_Pause;
    public struct SpacePlayerActions
    {
        private @PlayerControls m_Wrapper;
        public SpacePlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_SpacePlayer_Movement;
        public InputAction @Hover => m_Wrapper.m_SpacePlayer_Hover;
        public InputAction @Roll => m_Wrapper.m_SpacePlayer_Roll;
        public InputAction @Look => m_Wrapper.m_SpacePlayer_Look;
        public InputAction @DismountShip => m_Wrapper.m_SpacePlayer_DismountShip;
        public InputAction @PickUp => m_Wrapper.m_SpacePlayer_PickUp;
        public InputAction @Pause => m_Wrapper.m_SpacePlayer_Pause;
        public InputActionMap Get() { return m_Wrapper.m_SpacePlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpacePlayerActions set) { return set.Get(); }
        public void SetCallbacks(ISpacePlayerActions instance)
        {
            if (m_Wrapper.m_SpacePlayerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_SpacePlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_SpacePlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_SpacePlayerActionsCallbackInterface.OnMovement;
                @Hover.started -= m_Wrapper.m_SpacePlayerActionsCallbackInterface.OnHover;
                @Hover.performed -= m_Wrapper.m_SpacePlayerActionsCallbackInterface.OnHover;
                @Hover.canceled -= m_Wrapper.m_SpacePlayerActionsCallbackInterface.OnHover;
                @Roll.started -= m_Wrapper.m_SpacePlayerActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_SpacePlayerActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_SpacePlayerActionsCallbackInterface.OnRoll;
                @Look.started -= m_Wrapper.m_SpacePlayerActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_SpacePlayerActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_SpacePlayerActionsCallbackInterface.OnLook;
                @DismountShip.started -= m_Wrapper.m_SpacePlayerActionsCallbackInterface.OnDismountShip;
                @DismountShip.performed -= m_Wrapper.m_SpacePlayerActionsCallbackInterface.OnDismountShip;
                @DismountShip.canceled -= m_Wrapper.m_SpacePlayerActionsCallbackInterface.OnDismountShip;
                @PickUp.started -= m_Wrapper.m_SpacePlayerActionsCallbackInterface.OnPickUp;
                @PickUp.performed -= m_Wrapper.m_SpacePlayerActionsCallbackInterface.OnPickUp;
                @PickUp.canceled -= m_Wrapper.m_SpacePlayerActionsCallbackInterface.OnPickUp;
                @Pause.started -= m_Wrapper.m_SpacePlayerActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_SpacePlayerActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_SpacePlayerActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_SpacePlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Hover.started += instance.OnHover;
                @Hover.performed += instance.OnHover;
                @Hover.canceled += instance.OnHover;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @DismountShip.started += instance.OnDismountShip;
                @DismountShip.performed += instance.OnDismountShip;
                @DismountShip.canceled += instance.OnDismountShip;
                @PickUp.started += instance.OnPickUp;
                @PickUp.performed += instance.OnPickUp;
                @PickUp.canceled += instance.OnPickUp;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public SpacePlayerActions @SpacePlayer => new SpacePlayerActions(this);

    // GroundPlayer
    private readonly InputActionMap m_GroundPlayer;
    private IGroundPlayerActions m_GroundPlayerActionsCallbackInterface;
    private readonly InputAction m_GroundPlayer_Movement;
    private readonly InputAction m_GroundPlayer_Jump;
    private readonly InputAction m_GroundPlayer_Look;
    private readonly InputAction m_GroundPlayer_DismountShip;
    private readonly InputAction m_GroundPlayer_PickUp;
    private readonly InputAction m_GroundPlayer_Pause;
    public struct GroundPlayerActions
    {
        private @PlayerControls m_Wrapper;
        public GroundPlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_GroundPlayer_Movement;
        public InputAction @Jump => m_Wrapper.m_GroundPlayer_Jump;
        public InputAction @Look => m_Wrapper.m_GroundPlayer_Look;
        public InputAction @DismountShip => m_Wrapper.m_GroundPlayer_DismountShip;
        public InputAction @PickUp => m_Wrapper.m_GroundPlayer_PickUp;
        public InputAction @Pause => m_Wrapper.m_GroundPlayer_Pause;
        public InputActionMap Get() { return m_Wrapper.m_GroundPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GroundPlayerActions set) { return set.Get(); }
        public void SetCallbacks(IGroundPlayerActions instance)
        {
            if (m_Wrapper.m_GroundPlayerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_GroundPlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_GroundPlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_GroundPlayerActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_GroundPlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_GroundPlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_GroundPlayerActionsCallbackInterface.OnJump;
                @Look.started -= m_Wrapper.m_GroundPlayerActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_GroundPlayerActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_GroundPlayerActionsCallbackInterface.OnLook;
                @DismountShip.started -= m_Wrapper.m_GroundPlayerActionsCallbackInterface.OnDismountShip;
                @DismountShip.performed -= m_Wrapper.m_GroundPlayerActionsCallbackInterface.OnDismountShip;
                @DismountShip.canceled -= m_Wrapper.m_GroundPlayerActionsCallbackInterface.OnDismountShip;
                @PickUp.started -= m_Wrapper.m_GroundPlayerActionsCallbackInterface.OnPickUp;
                @PickUp.performed -= m_Wrapper.m_GroundPlayerActionsCallbackInterface.OnPickUp;
                @PickUp.canceled -= m_Wrapper.m_GroundPlayerActionsCallbackInterface.OnPickUp;
                @Pause.started -= m_Wrapper.m_GroundPlayerActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_GroundPlayerActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_GroundPlayerActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_GroundPlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @DismountShip.started += instance.OnDismountShip;
                @DismountShip.performed += instance.OnDismountShip;
                @DismountShip.canceled += instance.OnDismountShip;
                @PickUp.started += instance.OnPickUp;
                @PickUp.performed += instance.OnPickUp;
                @PickUp.canceled += instance.OnPickUp;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public GroundPlayerActions @GroundPlayer => new GroundPlayerActions(this);
    public interface ISpacePlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnHover(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnDismountShip(InputAction.CallbackContext context);
        void OnPickUp(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IGroundPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnDismountShip(InputAction.CallbackContext context);
        void OnPickUp(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
